import { ChartData, ChartDataset, ChartOptions } from "chart.js";
import React from "react";
import { Bar } from "react-chartjs-2";
import { useTranslation } from "react-i18next";
import { Button, ButtonDropdown, ButtonGroup, DropdownItem, DropdownMenu, DropdownToggle } from "reactstrap";




interface IProps {
  tenants: ITenantDTO[] | ITenantMinDTO[];
  dataSetLabel?: string;
  desc?: boolean;
  displayLegend?: boolean;
}

const CountPerTenantBarChart: React.FC<IProps> = (props) => {
  const { t } = useTranslation();
  const { tenants, displayLegend, dataSetLabel = t("Number of items") } = props;
  const [dropdownOpen, toggleDropdownOpen] = React.useState(false);
  const [desc, setDesc] = React.useState(props.desc ?? true);
  const [numberOfEntries, setNumberOfEntries] = React.useState(10);

  function handleSetNumberOfEntries(entries: number) {
    setNumberOfEntries(entries);
  }

  const handleSetDesc = () => setDesc(!desc);

  const handleDropdownOpen = () => toggleDropdownOpen(!dropdownOpen);

  const { paged, totalCount } = React.useMemo(() => {
    const dataAsArray = ListHelpers.groupAndSortArrayById(tenants);
    const totalCount = dataAsArray.length;
    if (!desc) {
      dataAsArray.reverse();
    }
    const paged = dataAsArray.splice(0, numberOfEntries);
    return { paged, totalCount };
  }, [tenants, desc, numberOfEntries]);

  const dataSet: ChartDataset<"bar", number[]> = {
    label: dataSetLabel,
    backgroundColor: Colors.qmBaseLightblue,
    borderColor: Colors.qmBaseLightblue,
    data: paged.map((x) => x.count),
  };
  const dataSets: ChartDataset<"bar", number[]>[] = [];
  dataSets.push(dataSet);
  const chartData: ChartData<"bar"> = {
    labels: paged.map((x) => x.entity.fullName),
    datasets: dataSets,
  };
  const options: ChartOptions<"bar"> = {
    scales: {
      y: { beginAtZero: true },
    },
    plugins: {
      legend: { display: displayLegend },
    },
  };

  if (dataSets.length == 1 && dataSets[0].data.length == 0) {
    return <em>{t("No data to display")}</em>;
  }

  return (
    <React.Fragment>
      <ButtonGroup className="float-end">
        <Button onClick={handleSetDesc}>
          {desc ? <qmBaseIcons.SortDown title={t("Descending")} /> : <qmBaseIcons.SortUp title={t("Ascending")} />}
        </Button>
        <ButtonDropdown isOpen={dropdownOpen} toggle={handleDropdownOpen} title={t("Entries to display")}>
          <DropdownToggle caret={totalCount > 10}>{totalCount < 10 ? totalCount : numberOfEntries}</DropdownToggle>
          <DropdownMenu end>
            {totalCount > 10 && <DropdownItem onClick={() => handleSetNumberOfEntries(10)}>10</DropdownItem>}
            {totalCount > 20 && <DropdownItem onClick={() => handleSetNumberOfEntries(20)}>20</DropdownItem>}

            <DropdownItem onClick={() => handleSetNumberOfEntries(totalCount)}>
              {t("All")} ({totalCount})
            </DropdownItem>
          </DropdownMenu>
        </ButtonDropdown>
      </ButtonGroup>
      <Bar data={chartData} options={options} height={96} />
    </React.Fragment>
  );
};

export default CountPerTenantBarChart;
