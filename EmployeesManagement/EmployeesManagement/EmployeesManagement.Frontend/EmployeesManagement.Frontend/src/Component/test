import React from "react";
import { useTranslation } from "react-i18next";
import {
  DropdownItem,
  DropdownMenu,
  DropdownToggle,
  ListGroup,
  ListGroupItem,
  UncontrolledButtonDropdown,
} from "reactstrap";

import { IAddressCreateDTO, IAddressDTO, ICapabilitiesDTO } from "../../../generatedCode/pbd-core/pbd-core-api";

import { ListHelpers } from "../../../Helpers/ListHelpers";
import PlacesForm from "../../settings/places/components/placesForm";
import ConnectedCardHeader from "../../shared/components/connectionElements/shared/legacy/connectedCardHeader";
import { qmBaseIcons } from "../../shared/components/icons/qmBaseIcons";
import { useConfirmation } from "../../shared/contexts/modalConfirmationContext";

interface IProps {
  connectedAddresses?: IAddressDTO[];
  onAdd: (values: IAddressCreateDTO) => Promise<void>;
  onDelete: (id: number) => Promise<void>;
  onEdit: (addressId: number, dto: IAddressDTO) => Promise<void>;
  refreshParent: () => void;
  baseDTO: { id: number; capabilities?: ICapabilitiesDTO };
}
function AddressCard(props: IProps) {
  const { baseDTO, refreshParent, connectedAddresses, onEdit } = props;
  const { t } = useTranslation();
  const [selectionMode] = React.useState(false);
  const [addMode, setAddMode] = React.useState(false);
  const confirm = useConfirmation();

  const tryToDelete = (dto: IAddressDTO) => {
    confirm({ itemsToDelete: [{ id: dto.id, title: dto.fullAddress }] }).then(() => submitDeleteRequest(dto.id));
  };

  async function handleEdit(dto: IAddressDTO) {
    await onEdit(dto.id, dto);
    refreshParent();
  }

  async function submitDeleteRequest(id: number) {
    await props.onDelete(id);
    refreshParent();
  }

  const toggleAddMode = () => setAddMode(!addMode);

  async function handleAdd(dto: IAddressCreateDTO) {
    await props.onAdd(dto);
    setAddMode(false);
    props.refreshParent();
  }

  return (
    <>
      <ConnectedCardHeader
        title={
          <span>
            <i className="fa fa-map-marker" /> {t("Addresses")}
          </span>
        }
        toggleConnectModal={toggleAddMode}
        selectionMode={selectionMode}
        // toggleSelectionMode={
        //     props.connectedAddresses && props.connectedAddresses.length > 0 ? toggleSelectionMode : null
        // }
        canAddChildren={baseDTO.capabilities?.canEdit}
      />

      <ListGroup flush>
        {addMode && (
          <ListGroupItem color="primary">
            <PlacesForm onSubmit={handleAdd} />
          </ListGroupItem>
        )}
        {connectedAddresses &&
          ListHelpers.sortListWithPrimary(connectedAddresses).map((x) => (
            <ListGroupItem key={x.id} className="d-flex justify-content-between">
              <div>
                {x.isPrimary ? <i className="fa fa-star" style={{ color: "purple" }} /> : ""} {x.fullAddress}
              </div>
              <UncontrolledButtonDropdown>
                <DropdownToggle color="secondary" outline size="sm" disabled={!baseDTO.capabilities?.canEdit}>
                  <qmBaseIcons.EllipsisVertical />
                </DropdownToggle>
                <DropdownMenu end>
                  <DropdownItem onClick={() => handleEdit(x)}>
                    <i className="fa fa-star" /> {t("Set as primary")}
                  </DropdownItem>
                  <DropdownItem onClick={() => tryToDelete(x)}>
                    <qmBaseIcons.Delete /> {t("Delete")}
                  </DropdownItem>
                </DropdownMenu>
              </UncontrolledButtonDropdown>
            </ListGroupItem>
          ))}
      </ListGroup>
    </>
  );
}

export default AddressCard;
