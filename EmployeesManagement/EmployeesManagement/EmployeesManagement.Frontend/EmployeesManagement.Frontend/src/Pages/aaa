/* eslint-disable @typescript-eslint/no-unsafe-member-access */
import { Chart, ChartData, ChartDataset, ChartOptions } from "chart.js";
import { countBy } from "lodash";
import { useRef } from "react";
import { Doughnut, getElementAtEvent } from "react-chartjs-2";
import { useTranslation } from "react-i18next";

import { PbdStatus } from "../../../../generatedCode/pbd-core/pbd-core-api";

import { Colors } from "../../../../Models/Enums/Colors";

interface IProps {
  data: PbdStatus[];
  legendAsTable?: boolean;
  onClick?: (key: PbdStatus) => void;
}

function StatusDoughnutChart(props: IProps) {
  const { data, legendAsTable, onClick } = props;
  const { t } = useTranslation();
  const chartRef = useRef<Chart<"doughnut">>(null);
  const statusGrouped = countBy(data, function (e) {
    return e;
  });
  const values = [];
  for (const key of Object.keys(statusGrouped)) {
    const label = key;
    const typedColorString = label as keyof typeof Colors;
    values.push({
      key: t(key),
      value: statusGrouped[key],
      color: Colors[typedColorString],
    });
  }
  const dataSet: ChartDataset<"doughnut", number[]> = {
    label: "Status",
    backgroundColor: values.map((x) => x.color),
    data: values.map((x) => x.value),
  };
  const dataSets: ChartDataset<"doughnut", number[]>[] = [];
  dataSets.push(dataSet);
  //dataSets[0] = dataSet;
  const chartData: ChartData<"doughnut"> = {
    labels: values.map((x) => x.key),
    datasets: dataSets,
  };

  const options: ChartOptions<"doughnut"> = {
    plugins: {
      legend: {
        display: !legendAsTable,
      },
    },
  };

  const handleChartClick = (event: React.MouseEvent<HTMLCanvasElement>) => {
    const chart = chartRef.current;

    if (!chart) {
      return;
    }
    //@ts-expect-error TODO: Fix later 2023-10-25 PP
    const element = getElementAtEvent(chart, event)[0];
    const statusLabels = Object.keys(statusGrouped);
    const selectedStatus = statusLabels[element.index];
    onClick?.(selectedStatus as PbdStatus);
  };
  if (Object.keys(statusGrouped).length == 0) {
    return <em>{t("No data to display")}</em>;
  }

  return (
    <>
      <Doughnut
        ref={chartRef}
        data={chartData}
        options={options}
        onClick={handleChartClick}
        style={onClick ? { cursor: "pointer" } : undefined}
      />
      {legendAsTable && (
        <div className="d-flex justify-content-around mb-0 mt-3">
          {values.map((x) => (
            <div key={x.key}>
              {t(x.key)}
              <h3 className="font-weight-bold" style={{ color: x.color }}>
                {x.value}
              </h3>
            </div>
          ))}
        </div>
      )}
    </>
  );
}

export default StatusDoughnutChart;
